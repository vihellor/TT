- MySQL Script generated by MySQL Workbench
-- Sat 08 Sep 2018 03:52:29 PM CDT
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema TT
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `TT` ;

-- -----------------------------------------------------
-- Schema TT
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `TT` DEFAULT CHARACTER SET utf8 ;
USE `TT` ;

-- -----------------------------------------------------
-- Table `TT`.`usuario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `TT`.`usuario` (
  `idUsuario` INT NOT NULL AUTO_INCREMENT,
  `nickname` VARCHAR(45) NOT NULL,
  `nombre` VARCHAR(45) NULL,
  `apellidos` VARCHAR(45) NULL,
  `ocupacion` VARCHAR(45) NULL,
  `correo` VARCHAR(45) NULL COMMENT '\n',
  `contrasena` VARCHAR(45) NULL,
  PRIMARY KEY (`idUsuario`, `nickname`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TT`.`listaFlujos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `TT`.`listaFlujos` (
  `idFlujo` INT NOT NULL,
  `nombreFlujo` VARCHAR(45) NULL,
  `descripcionFlujo` VARCHAR(45) NULL,
  PRIMARY KEY (`idFlujo`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TT`.`flujo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `TT`.`flujo` (
  `usuario_idUsuario` INT NOT NULL,
  `fechaCorte` INT NULL,
  `tipoFlujo` TINYINT NULL COMMENT 'Especifica si es periodico o no',
  `monto` FLOAT NULL,
  `estado` VARCHAR(45) NULL,
  `listaFlujos_idFlujo` INT NOT NULL,
  INDEX `fk_egreso_usuario_idx` (`usuario_idUsuario` ASC),
  PRIMARY KEY (`usuario_idUsuario`),
  INDEX `fk_flujo_listaFlujos1_idx` (`listaFlujos_idFlujo` ASC),
  CONSTRAINT `fk_egreso_usuario`
    FOREIGN KEY (`usuario_idUsuario`)
    REFERENCES `TT`.`usuario` (`idUsuario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_flujo_listaFlujos1`
    FOREIGN KEY (`listaFlujos_idFlujo`)
    REFERENCES `TT`.`listaFlujos` (`idFlujo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TT`.`instituciones`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `TT`.`instituciones` (
  `idinstituciones` INT NOT NULL AUTO_INCREMENT COMMENT '	',
  `nombreInstitucion` VARCHAR(45) NULL,
  `descripcionInstitucion` VARCHAR(45) NULL,
  PRIMARY KEY (`idinstituciones`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TT`.`tarjetaDeCredito`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `TT`.`tarjetaDeCredito` (
  `idtarjetaDeCredito` INT NOT NULL,
  `montoMaximo` FLOAT NULL,
  `fechaCorte` INT NULL,
  `saldo` FLOAT NULL,
  `tasaInteresAnual` FLOAT NULL,
  `usuario_idUsuario` INT NOT NULL,
  `usuario_nickname` VARCHAR(45) NOT NULL,
  `instituciones_idinstituciones` INT NOT NULL,
  PRIMARY KEY (`idtarjetaDeCredito`),
  INDEX `fk_tarjetaDeCredito_usuario1_idx` (`usuario_idUsuario` ASC, `usuario_nickname` ASC),
  INDEX `fk_tarjetaDeCredito_instituciones1_idx` (`instituciones_idinstituciones` ASC),
  CONSTRAINT `fk_tarjetaDeCredito_usuario1`
    FOREIGN KEY (`usuario_idUsuario` , `usuario_nickname`)
    REFERENCES `TT`.`usuario` (`idUsuario` , `nickname`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_tarjetaDeCredito_instituciones1`
    FOREIGN KEY (`instituciones_idinstituciones`)
    REFERENCES `TT`.`instituciones` (`idinstituciones`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TT`.`tarjetaDebito`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `TT`.`tarjetaDebito` (
  `idtarjetaDebito` INT NOT NULL,
  `saldo` FLOAT NULL,
  `comisionxMCuenta` TINYINT NULL,
  `porcentajexManejoCuenta` FLOAT NULL,
  `comisionFija` TINYINT NULL,
  `valorComisionFija` FLOAT NULL,
  `usuario_idUsuario` INT NOT NULL,
  `usuario_nickname` VARCHAR(45) NOT NULL,
  `instituciones_idinstituciones` INT NOT NULL,
  PRIMARY KEY (`idtarjetaDebito`),
  INDEX `fk_tarjetaDebito_usuario1_idx` (`usuario_idUsuario` ASC, `usuario_nickname` ASC),
  INDEX `fk_tarjetaDebito_instituciones1_idx` (`instituciones_idinstituciones` ASC),
  CONSTRAINT `fk_tarjetaDebito_usuario1`
    FOREIGN KEY (`usuario_idUsuario` , `usuario_nickname`)
    REFERENCES `TT`.`usuario` (`idUsuario` , `nickname`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_tarjetaDebito_instituciones1`
    FOREIGN KEY (`instituciones_idinstituciones`)
    REFERENCES `TT`.`instituciones` (`idinstituciones`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TT`.`partida`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `TT`.`partida` (
  `idpartida` INT NOT NULL,
  `nombre` VARCHAR(45) NULL,
  `estado` TINYINT NULL,
  `jugadores` INT NULL,
  `meta` FLOAT NULL,
  PRIMARY KEY (`idpartida`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TT`.`partida_has_usuario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `TT`.`partida_has_usuario` (
  `partida_idpartida` INT NOT NULL,
  `usuario_idUsuario` INT NOT NULL,
  `usuario_nickname` VARCHAR(45) NOT NULL,
  INDEX `fk_partida_has_usuario_partida1_idx` (`partida_idpartida` ASC),
  INDEX `fk_partida_has_usuario_usuario1_idx` (`usuario_idUsuario` ASC, `usuario_nickname` ASC),
  CONSTRAINT `fk_partida_has_usuario_partida1`
    FOREIGN KEY (`partida_idpartida`)
    REFERENCES `TT`.`partida` (`idpartida`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_partida_has_usuario_usuario1`
    FOREIGN KEY (`usuario_idUsuario` , `usuario_nickname`)
    REFERENCES `TT`.`usuario` (`idUsuario` , `nickname`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TT`.`instrumento`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `TT`.`instrumento` (
  `idinstrumento` INT NOT NULL,
  `nombreInstrumento` VARCHAR(45) NULL,
  `valor` FLOAT NULL,
  `horizonte` INT NULL,
  `valorNominal` FLOAT NULL,
  `partida_idpartida` INT NOT NULL,
  PRIMARY KEY (`idinstrumento`),
  INDEX `fk_instrumento_partida1_idx` (`partida_idpartida` ASC),
  CONSTRAINT `fk_instrumento_partida1`
    FOREIGN KEY (`partida_idpartida`)
    REFERENCES `TT`.`partida` (`idpartida`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TT`.`accion`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `TT`.`accion` (
  `idaccion` INT NOT NULL,
  `nombreAccion` VARCHAR(45) NULL,
  `valorInicial` FLOAT NULL,
  `media` FLOAT NULL,
  `porcentajeCambio` FLOAT NULL,
  `porcentajeVolatilidad` FLOAT NULL,
  `partida_idpartida` INT NOT NULL,
  PRIMARY KEY (`idaccion`),
  INDEX `fk_accion_partida1_idx` (`partida_idpartida` ASC),
  CONSTRAINT `fk_accion_partida1`
    FOREIGN KEY (`partida_idpartida`)
    REFERENCES `TT`.`partida` (`idpartida`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TT`.`factorRiesgo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `TT`.`factorRiesgo` (
  `idfactorRiesgo` INT NOT NULL,
  `nombreFactor` VARCHAR(45) NULL,
  `probabilidadGeneral` FLOAT NULL,
  `probabilidadBajoImpacto` FLOAT NULL,
  `probabilidadMedianoImpacto` FLOAT NULL,
  `probabilidadAltoImpacto` FLOAT NULL,
  `partida_idpartida` INT NOT NULL,
  PRIMARY KEY (`idfactorRiesgo`),
  INDEX `fk_factorRiesgo_partida1_idx` (`partida_idpartida` ASC),
  CONSTRAINT `fk_factorRiesgo_partida1`
    FOREIGN KEY (`partida_idpartida`)
    REFERENCES `TT`.`partida` (`idpartida`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TT`.`categoria`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `TT`.`categoria` (
  `idcategoria` INT NOT NULL,
  `nombreCategoria` VARCHAR(45) NULL,
  PRIMARY KEY (`idcategoria`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TT`.`tutorial`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `TT`.`tutorial` (
  `idtutorial` INT NOT NULL,
  `nombreTutorial` VARCHAR(45) NULL,
  `estado` VARCHAR(45) NULL,
  `categoria_idcategoria` INT NOT NULL,
  PRIMARY KEY (`idtutorial`),
  INDEX `fk_tutorial_categoria1_idx` (`categoria_idcategoria` ASC),
  CONSTRAINT `fk_tutorial_categoria1`
    FOREIGN KEY (`categoria_idcategoria`)
    REFERENCES `TT`.`categoria` (`idcategoria`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TT`.`glosario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `TT`.`glosario` (
  `glosariocol` INT NOT NULL AUTO_INCREMENT,
  `concepto` VARCHAR(45) NULL,
  `definicion` VARCHAR(200) NULL,
  PRIMARY KEY (`glosariocol`))
ENGINE = InnoDB;

USE `TT` ;

-- -----------------------------------------------------
-- procedure getUsuario
-- -----------------------------------------------------

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE getUsuario (IN _correo VARCHAR(45))
BEGIN
	select * FROM usuario WHERE correo=_correo;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure setContrasena
-- -----------------------------------------------------

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE setContrasena (IN _contrasena VARCHAR(45), IN _correo VARCHAR(45))
BEGIN
	UPDATE usuario SET contrasena=_contrasena WHERE correo=_correo;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getID
-- -----------------------------------------------------

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE getID (IN _correo VARCHAR(45))
BEGIN
	SELECT idUsuario FROM usuario WHERE correo=_correo;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure createUsuario
-- -----------------------------------------------------

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE createUsuario (IN _nombre VARCHAR(45), IN _apellidos VARCHAR(45), IN _nickname VARCHAR(45), IN _ocupacion VARCHAR(45), IN _correo varchar(45), IN _contrasena VARCHAR(45))
BEGIN
	INSERT INTO usuario (nombre,apellidos,nickname,ocupacion,correo,contrasena) VALUES (_nombre,_apellidos,_nickname,_ocupacion,_correo,_contrasena);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getContrasena
-- -----------------------------------------------------

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE getContrasena (IN _idUsuario VARCHAR(45))
BEGIN
	SELECT contrasena FROM usuario WHERE idUsuario=_idUsuario;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure insertConcepto
-- -----------------------------------------------------

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `insertConcepto` (IN _concepto VARCHAR(45), IN _definicion VARCHAR(200))
BEGIN
	INSERT INTO glosario (concepto, definicion) VALUES (_concepto, _definicion);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure updateUsuario
-- -----------------------------------------------------

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `updateUsuario` (IN _nombre VARCHAR(45), IN _apellidos VARCHAR(45), IN _nickname VARCHAR(45), IN _ocupacion VARCHAR(45), IN _correo varchar(45), IN _contrasena VARCHAR(45))
BEGIN
	UPDATE usuario SET nombre=_nombre , apellidos=_apellidos, nickname=_nickname , ocupacion=_ocupacion, contrasena=_contrasena WHERE correo=_correo ;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure deleteUsuario
-- -----------------------------------------------------

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `deleteUsuario` (IN _correo VARCHAR(45))
BEGIN
	DELETE FROM usuario WHERE correo=_correo;
END$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
