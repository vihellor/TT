-- MySQL Script generated by MySQL Workbench
-- Sat 22 Sep 2018 04:53:06 PM CDT
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema TT
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `TT` ;

-- -----------------------------------------------------
-- Schema TT
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `TT` DEFAULT CHARACTER SET utf8 ;
USE `TT` ;

-- -----------------------------------------------------
-- Table `TT`.`partida`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `TT`.`partida` ;

CREATE TABLE IF NOT EXISTS `TT`.`partida` (
  `idpartida` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(20) NULL,
  `estado` TINYINT NULL,
  `jugadores` INT NULL,
  `meta` FLOAT NULL,
  PRIMARY KEY (`idpartida`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TT`.`usuario`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `TT`.`usuario` ;

CREATE TABLE IF NOT EXISTS `TT`.`usuario` (
  `idUsuario` INT NOT NULL AUTO_INCREMENT,
  `nickname` VARCHAR(15) NOT NULL,
  `nombre` VARCHAR(15) NULL,
  `apellidoPaterno` VARCHAR(15) NULL COMMENT '\n',
  `apellidoMaterno` VARCHAR(15) NULL,
  `ocupacion` VARCHAR(15) NULL,
  `correo` VARCHAR(45) NULL COMMENT '\n',
  `contrasena` VARCHAR(15) NULL,
  `idpartida` INT NULL,
  PRIMARY KEY (`idUsuario`, `nickname`),
  UNIQUE INDEX `nickname_UNIQUE` (`nickname` ASC),
  INDEX `fk_usuario_partida1_idx` (`idpartida` ASC),
  CONSTRAINT `fk_usuario_partida1`
    FOREIGN KEY (`idpartida`)
    REFERENCES `TT`.`partida` (`idpartida`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TT`.`listaFlujos`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `TT`.`listaFlujos` ;

CREATE TABLE IF NOT EXISTS `TT`.`listaFlujos` (
  `idFlujo` INT NOT NULL,
  `nombreFlujo` VARCHAR(15) NULL,
  `descripcionFlujo` VARCHAR(45) NULL,
  PRIMARY KEY (`idFlujo`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TT`.`flujo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `TT`.`flujo` ;

CREATE TABLE IF NOT EXISTS `TT`.`flujo` (
  `fechaCorte` INT NULL,
  `tipoFlujo` TINYINT NULL COMMENT 'Especifica si es periodico o no',
  `monto` FLOAT NULL,
  `estado` TINYINT NULL,
  `idUsuario` INT NOT NULL,
  `nickname` VARCHAR(15) NOT NULL,
  `idFlujo` INT NOT NULL,
  INDEX `fk_flujo_usuario1_idx` (`idUsuario` ASC, `nickname` ASC),
  INDEX `fk_flujo_listaFlujos1_idx` (`idFlujo` ASC),
  CONSTRAINT `fk_flujo_usuario1`
    FOREIGN KEY (`idUsuario` , `nickname`)
    REFERENCES `TT`.`usuario` (`idUsuario` , `nickname`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_flujo_listaFlujos1`
    FOREIGN KEY (`idFlujo`)
    REFERENCES `TT`.`listaFlujos` (`idFlujo`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TT`.`institucion`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `TT`.`institucion` ;

CREATE TABLE IF NOT EXISTS `TT`.`institucion` (
  `idInstitucion` INT NOT NULL AUTO_INCREMENT COMMENT '	',
  `nombreInstitucion` VARCHAR(15) NULL,
  `descripcionInstitucion` VARCHAR(45) NULL,
  PRIMARY KEY (`idInstitucion`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TT`.`tarjeta`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `TT`.`tarjeta` ;

CREATE TABLE IF NOT EXISTS `TT`.`tarjeta` (
  `idtarjeta` BIGINT(16) NOT NULL,
  `fechaCorte` INT NULL,
  `saldo` FLOAT NULL,
  `tipoTarjeta` TINYINT NULL,
  `idInstitucion` INT NOT NULL,
  `idUsuario` INT NOT NULL,
  `nickname` VARCHAR(15) NOT NULL,
  PRIMARY KEY (`idtarjeta`),
  INDEX `fk_tarjeta_instituciones1_idx` (`idInstitucion` ASC),
  INDEX `fk_tarjeta_usuario1_idx` (`idUsuario` ASC, `nickname` ASC),
  CONSTRAINT `fk_tarjeta_instituciones1`
    FOREIGN KEY (`idInstitucion`)
    REFERENCES `TT`.`institucion` (`idInstitucion`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_tarjeta_usuario1`
    FOREIGN KEY (`idUsuario` , `nickname`)
    REFERENCES `TT`.`usuario` (`idUsuario` , `nickname`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TT`.`tarjetaDeCredito`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `TT`.`tarjetaDeCredito` ;

CREATE TABLE IF NOT EXISTS `TT`.`tarjetaDeCredito` (
  `idTarjetaDeCredito` INT(11) NOT NULL,
  `limiteCredito` FLOAT NULL,
  `tasaInteresAnual` FLOAT NULL,
  `idtarjeta` BIGINT(16) NOT NULL,
  PRIMARY KEY (`idTarjetaDeCredito`),
  INDEX `fk_tarjetaDeCredito_tarjeta1_idx` (`idtarjeta` ASC),
  CONSTRAINT `fk_tarjetaDeCredito_tarjeta1`
    FOREIGN KEY (`idtarjeta`)
    REFERENCES `TT`.`tarjeta` (`idtarjeta`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TT`.`tarjetaDebito`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `TT`.`tarjetaDebito` ;

CREATE TABLE IF NOT EXISTS `TT`.`tarjetaDebito` (
  `idTarjetaDebito` INT NOT NULL,
  `comisionFija` TINYINT NULL,
  `porcentajexManejoCuenta` FLOAT NULL,
  `valorComisionFija` FLOAT NULL,
  `idtarjeta` BIGINT(16) NOT NULL,
  PRIMARY KEY (`idTarjetaDebito`),
  INDEX `fk_tarjetaDebito_tarjeta1_idx` (`idtarjeta` ASC),
  CONSTRAINT `fk_tarjetaDebito_tarjeta1`
    FOREIGN KEY (`idtarjeta`)
    REFERENCES `TT`.`tarjeta` (`idtarjeta`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TT`.`instrumento`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `TT`.`instrumento` ;

CREATE TABLE IF NOT EXISTS `TT`.`instrumento` (
  `idinstrumento` INT NOT NULL,
  `nombreInstrumento` VARCHAR(45) NULL,
  `valor` FLOAT NULL,
  `plazo` INT NULL,
  `valorNominal` FLOAT NULL,
  `idpartida` INT NOT NULL,
  PRIMARY KEY (`idinstrumento`),
  INDEX `fk_instrumento_partida1_idx` (`idpartida` ASC),
  CONSTRAINT `fk_instrumento_partida1`
    FOREIGN KEY (`idpartida`)
    REFERENCES `TT`.`partida` (`idpartida`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TT`.`accion`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `TT`.`accion` ;

CREATE TABLE IF NOT EXISTS `TT`.`accion` (
  `idaccion` INT NOT NULL,
  `nombreAccion` VARCHAR(15) NULL,
  `valorInicial` FLOAT NULL,
  `media` FLOAT NULL,
  `porcentajeCambio` FLOAT NULL,
  `porcentajeVolatilidad` FLOAT NULL,
  `idpartida` INT NOT NULL,
  PRIMARY KEY (`idaccion`),
  INDEX `fk_accion_partida1_idx` (`idpartida` ASC),
  CONSTRAINT `fk_accion_partida1`
    FOREIGN KEY (`idpartida`)
    REFERENCES `TT`.`partida` (`idpartida`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TT`.`factorRiesgo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `TT`.`factorRiesgo` ;

CREATE TABLE IF NOT EXISTS `TT`.`factorRiesgo` (
  `idfactorRiesgo` INT NOT NULL,
  `nombreFactor` VARCHAR(15) NULL,
  `probabilidadGeneral` FLOAT NULL,
  `probabilidadBajoImpacto` FLOAT NULL,
  `probabilidadMedianoImpacto` FLOAT NULL,
  `probabilidadAltoImpacto` FLOAT NULL,
  `idpartida` INT NOT NULL,
  PRIMARY KEY (`idfactorRiesgo`),
  INDEX `fk_factorRiesgo_partida1_idx` (`idpartida` ASC),
  CONSTRAINT `fk_factorRiesgo_partida1`
    FOREIGN KEY (`idpartida`)
    REFERENCES `TT`.`partida` (`idpartida`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TT`.`categoria`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `TT`.`categoria` ;

CREATE TABLE IF NOT EXISTS `TT`.`categoria` (
  `idcategoria` INT NOT NULL,
  `nombreCategoria` VARCHAR(45) NULL,
  `idUsuario` INT NOT NULL,
  `nickname` VARCHAR(15) NOT NULL,
  PRIMARY KEY (`idcategoria`),
  INDEX `fk_categoria_usuario1_idx` (`idUsuario` ASC, `nickname` ASC),
  CONSTRAINT `fk_categoria_usuario1`
    FOREIGN KEY (`idUsuario` , `nickname`)
    REFERENCES `TT`.`usuario` (`idUsuario` , `nickname`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TT`.`puntajes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `TT`.`puntajes` ;

CREATE TABLE IF NOT EXISTS `TT`.`puntajes` (
  `idrespuesta` INT NOT NULL,
  `respuesta` CHAR(1) NULL,
  PRIMARY KEY (`idrespuesta`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TT`.`tutorial`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `TT`.`tutorial` ;

CREATE TABLE IF NOT EXISTS `TT`.`tutorial` (
  `idtutorial` INT NOT NULL,
  `nombreTutorial` VARCHAR(45) NULL,
  `estado` VARCHAR(45) NULL,
  `idcategoria` INT NOT NULL,
  `idrespuesta` INT NOT NULL,
  PRIMARY KEY (`idtutorial`),
  INDEX `fk_tutorial_categoria1_idx` (`idcategoria` ASC),
  INDEX `fk_tutorial_puntajes1_idx` (`idrespuesta` ASC),
  CONSTRAINT `fk_tutorial_categoria1`
    FOREIGN KEY (`idcategoria`)
    REFERENCES `TT`.`categoria` (`idcategoria`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_tutorial_puntajes1`
    FOREIGN KEY (`idrespuesta`)
    REFERENCES `TT`.`puntajes` (`idrespuesta`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TT`.`glosario`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `TT`.`glosario` ;

CREATE TABLE IF NOT EXISTS `TT`.`glosario` (
  `idConcepto` INT NOT NULL AUTO_INCREMENT,
  `concepto` VARCHAR(45) NULL,
  `definicion` TEXT NULL,
  PRIMARY KEY (`idConcepto`),
  UNIQUE INDEX `concepto_UNIQUE` (`concepto` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TT`.`cuestionario`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `TT`.`cuestionario` ;

CREATE TABLE IF NOT EXISTS `TT`.`cuestionario` (
  `idcuestionario` INT NOT NULL,
  `nombreCuestionario` VARCHAR(60) NULL,
  `idtutorial` INT NOT NULL,
  INDEX `fk_cuestionario_tutorial1_idx` (`idtutorial` ASC),
  PRIMARY KEY (`idcuestionario`),
  CONSTRAINT `fk_cuestionario_tutorial1`
    FOREIGN KEY (`idtutorial`)
    REFERENCES `TT`.`tutorial` (`idtutorial`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TT`.`preguntas`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `TT`.`preguntas` ;

CREATE TABLE IF NOT EXISTS `TT`.`preguntas` (
  `idpreguntas` INT NOT NULL,
  `pregunta` VARCHAR(60) NULL,
  `opcionA` VARCHAR(45) NULL,
  `opcionB` VARCHAR(45) NULL,
  `opcionC` VARCHAR(45) NULL,
  `respuestaCorrecta` CHAR(1) NULL,
  `idcuestionario` INT NOT NULL,
  `idrespuesta` INT NOT NULL,
  PRIMARY KEY (`idpreguntas`),
  INDEX `fk_preguntas_cuestionario1_idx` (`idcuestionario` ASC),
  INDEX `fk_preguntas_puntajes1_idx` (`idrespuesta` ASC),
  CONSTRAINT `fk_preguntas_cuestionario1`
    FOREIGN KEY (`idcuestionario`)
    REFERENCES `TT`.`cuestionario` (`idcuestionario`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_preguntas_puntajes1`
    FOREIGN KEY (`idrespuesta`)
    REFERENCES `TT`.`puntajes` (`idrespuesta`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `TT` ;

-- -----------------------------------------------------
-- procedure readUsuario
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`readUsuario`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE readUsuario (IN _nickname VARCHAR(15), IN _contrasena VARCHAR(15))
BEGIN
	select * FROM usuario WHERE nickname=_nickname AND contrasena=_contrasena;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure setContrasena
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`setContrasena`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE setContrasena (IN _contrasena VARCHAR(45), IN _correo VARCHAR(45))
BEGIN
	UPDATE usuario SET contrasena=_contrasena WHERE correo=_correo;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getID
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`getID`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE getID (IN _correo VARCHAR(45))
BEGIN
	SELECT idUsuario FROM usuario WHERE correo=_correo;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure createUsuario
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`createUsuario`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE createUsuario (IN _nombre VARCHAR(15), IN _apellidoPaterno VARCHAR(15), IN _apellidoMaterno VARCHAR(15), IN _nickname VARCHAR(15), IN _ocupacion VARCHAR(15), IN _correo varchar(45), IN _contrasena VARCHAR(15))
BEGIN
	INSERT INTO usuario (nombre,apellidoPaterno,apellidoMaterno,nickname,ocupacion,correo,contrasena) VALUES (_nombre,_apellidoPaterno,_apellidoMaterno,_nickname,_ocupacion,_correo,_contrasena);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getContrasena
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`getContrasena`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE getContrasena (IN _idUsuario VARCHAR(45))
BEGIN
	SELECT contrasena FROM usuario WHERE idUsuario=_idUsuario;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure insertConcepto
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`insertConcepto`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `insertConcepto` (IN _concepto VARCHAR(45), IN _definicion VARCHAR(200))
BEGIN
	INSERT INTO glosario (concepto, definicion) VALUES (_concepto, _definicion);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure updateUsuario
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`updateUsuario`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `updateUsuario` (IN _nombre VARCHAR(15), IN _apellidoPaterno VARCHAR(15), IN _apellidoMaterno VARCHAR(15), IN _nickname VARCHAR(15), IN _ocupacion VARCHAR(15), IN _correo varchar(45), IN _contrasena VARCHAR(15))
BEGIN
	UPDATE usuario SET nombre=_nombre , apellidoPaterno=_apellidoPaterno, apellidoMaterno=_apellidoMaterno, nickname=_nickname , ocupacion=_ocupacion, contrasena=_contrasena WHERE correo=_correo ;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure deleteUsuario
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`deleteUsuario`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `deleteUsuario` (IN _correo VARCHAR(45))
BEGIN
	DELETE FROM usuario WHERE correo=_correo;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure createGlosario
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`createGlosario`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `createGlosario` (IN _concepto VARCHAR(45), IN _definicion VARCHAR(200))
BEGIN
	INSERT INTO glosario (concepto, definicion) VALUES (_concepto, _definicion);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure readGlosario
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`readGlosario`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `readGlosario` (IN _concepto VARCHAR(45))
BEGIN
	SELECT * FROM glosario WHERE concepto = _concepto;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure readAllGlosario
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`readAllGlosario`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `readAllGlosario` ()
BEGIN
	SELECT * FROM glosario;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure updateGlosario
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`updateGlosario`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `updateGlosario` (IN _idConcepto INT, IN _concepto VARCHAR(45), IN _definicion VARCHAR(200))
BEGIN
	UPDATE glosario SET concepto = _concepto, definicion = _definicion WHERE idConcepto = _idConcepto;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure deleteGlosario
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`deleteGlosario`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `deleteGlosario` (IN _idConcepto INT)
BEGIN
	DELETE FROM glosario WHERE idConcepto = _idConcepto;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure createTarjetaDebito
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`createTarjetaDebito`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `createTarjetaDebito` ()
BEGIN

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure createInstitucion
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`createInstitucion`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `createInstitucion` (IN _nombreInstitucion VARCHAR(15), IN descripcionInstitucion VARCHAR(45))
BEGIN
	INSERT INTO institucion (nombreInstitucion, descripcionInstitucion) VALUES(_nombreInstitucion, _descripcionInstitucion);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure readAllInstitucion
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`readAllInstitucion`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `readAllInstitucion` ()
BEGIN
	SELECT * FROM institucion;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure readInstitucion
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`readInstitucion`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `readInstitucion` (IN _idInstitucion INT)
BEGIN
	SELECT * FROM institucion WHERE idInstitucion = _idInstitucion;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure deleteInstitucion
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`deleteInstitucion`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `deleteInstitucion` (IN _idInstitucion INT)
BEGIN
	DELETE FROM institucion WHERE idInstitucion = _idInstitucion;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure updateInstitucion
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`updateInstitucion`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `updateInstitucion` (IN _idInstitucion INT, IN _nombreInstitucion VARCHAR(15), IN _descripcionInstitucion VARCHAR(45))
BEGIN
	UPDATE institucion SET nombreInstitucion = _nombreInstitucion, descripcionInstitucion = _descripcionInstitucion WHERE idInstitucion = _idInstitucion;
END$$

DELIMITER ;

-- -----------------------------------------------------
--  routine1
-- -----------------------------------------------------

USE `TT`;
DROP  IF EXISTS `TT`.`routine1`;

DELIMITER $$
USE `TT`$$
$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
