-- MySQL Script generated by MySQL Workbench
-- Mon 22 Oct 2018 12:37:29 AM CDT
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema TT
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `TT` ;

-- -----------------------------------------------------
-- Schema TT
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `TT` DEFAULT CHARACTER SET utf8 ;
USE `TT` ;

-- -----------------------------------------------------
-- Table `TT`.`partida`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `TT`.`partida` ;

CREATE TABLE IF NOT EXISTS `TT`.`partida` (
  `idPartida` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(20) NULL,
  `estado` TINYINT NULL,
  `limiteJugadores` INT NULL,
  `jugadores` INT NULL,
  `meta` FLOAT NULL,
  `fundador` INT NULL,
  `montoInicial` FLOAT NULL,
  PRIMARY KEY (`idPartida`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TT`.`casaDeBolsa`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `TT`.`casaDeBolsa` ;

CREATE TABLE IF NOT EXISTS `TT`.`casaDeBolsa` (
  `idCasaDeBolsa` INT NOT NULL AUTO_INCREMENT,
  `nombre` VARCHAR(20) NULL,
  `comisionCompraAccion` FLOAT NULL COMMENT '	',
  `mensualidadManejoPortafolio` FLOAT NULL,
  PRIMARY KEY (`idCasaDeBolsa`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TT`.`usuario`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `TT`.`usuario` ;

CREATE TABLE IF NOT EXISTS `TT`.`usuario` (
  `idUsuario` INT NOT NULL AUTO_INCREMENT,
  `nickname` VARCHAR(15) NOT NULL,
  `nombre` VARCHAR(15) NULL,
  `apellidoPaterno` VARCHAR(15) NULL COMMENT '\n',
  `apellidoMaterno` VARCHAR(15) NULL,
  `ocupacion` VARCHAR(15) NULL,
  `correo` VARCHAR(45) NULL COMMENT '\n',
  `contrasena` VARCHAR(15) NULL,
  `idPartida` INT NULL,
  `idCasaDeBolsa` INT NULL DEFAULT 1,
  PRIMARY KEY (`idUsuario`, `nickname`),
  UNIQUE INDEX `nickname_UNIQUE` (`nickname` ASC),
  INDEX `fk_usuario_partida1_idx` (`idPartida` ASC),
  INDEX `fk_usuario_casaDeBolsa1_idx` (`idCasaDeBolsa` ASC),
  CONSTRAINT `fk_usuario_partida1`
    FOREIGN KEY (`idPartida`)
    REFERENCES `TT`.`partida` (`idPartida`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_usuario_casaDeBolsa1`
    FOREIGN KEY (`idCasaDeBolsa`)
    REFERENCES `TT`.`casaDeBolsa` (`idCasaDeBolsa`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TT`.`flujo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `TT`.`flujo` ;

CREATE TABLE IF NOT EXISTS `TT`.`flujo` (
  `idFlujo` INT NOT NULL AUTO_INCREMENT,
  `nombreFlujo` VARCHAR(20) NULL,
  `fechaCorte` INT NULL,
  `tipoFlujo` TINYINT NULL COMMENT 'Especifica si es periodico o no',
  `monto` FLOAT NULL,
  `periodicidad` INT NULL,
  `idUsuario` INT NOT NULL,
  `nickname` VARCHAR(15) NOT NULL,
  INDEX `fk_flujo_usuario1_idx` (`idUsuario` ASC, `nickname` ASC),
  PRIMARY KEY (`idFlujo`),
  CONSTRAINT `fk_flujo_usuario1`
    FOREIGN KEY (`idUsuario` , `nickname`)
    REFERENCES `TT`.`usuario` (`idUsuario` , `nickname`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TT`.`tarjeta`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `TT`.`tarjeta` ;

CREATE TABLE IF NOT EXISTS `TT`.`tarjeta` (
  `idtarjeta` BIGINT(16) NOT NULL,
  `fechaCorte` INT NULL,
  `saldo` FLOAT NULL,
  `tipoTarjeta` TINYINT NULL,
  `idUsuario` INT NOT NULL,
  `nickname` VARCHAR(15) NOT NULL,
  PRIMARY KEY (`idtarjeta`),
  INDEX `fk_tarjeta_usuario1_idx` (`idUsuario` ASC, `nickname` ASC),
  CONSTRAINT `fk_tarjeta_usuario1`
    FOREIGN KEY (`idUsuario` , `nickname`)
    REFERENCES `TT`.`usuario` (`idUsuario` , `nickname`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TT`.`tarjetaDeCredito`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `TT`.`tarjetaDeCredito` ;

CREATE TABLE IF NOT EXISTS `TT`.`tarjetaDeCredito` (
  `idTarjetaDeCredito` INT NOT NULL,
  `limiteCredito` FLOAT NULL,
  `tasaInteresAnual` FLOAT NULL,
  `idtarjeta` BIGINT(16) NOT NULL,
  PRIMARY KEY (`idTarjetaDeCredito`),
  INDEX `fk_tarjetaDeCredito_tarjeta1_idx` (`idtarjeta` ASC),
  CONSTRAINT `fk_tarjetaDeCredito_tarjeta1`
    FOREIGN KEY (`idtarjeta`)
    REFERENCES `TT`.`tarjeta` (`idtarjeta`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TT`.`tarjetaDebito`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `TT`.`tarjetaDebito` ;

CREATE TABLE IF NOT EXISTS `TT`.`tarjetaDebito` (
  `idTarjetaDebito` INT NOT NULL AUTO_INCREMENT,
  `comisionFija` TINYINT NULL,
  `porcentajexManejoCuenta` FLOAT NULL,
  `valorComisionFija` FLOAT NULL,
  `idtarjeta` BIGINT(16) NOT NULL,
  PRIMARY KEY (`idTarjetaDebito`),
  INDEX `fk_tarjetaDebito_tarjeta1_idx` (`idtarjeta` ASC),
  CONSTRAINT `fk_tarjetaDebito_tarjeta1`
    FOREIGN KEY (`idtarjeta`)
    REFERENCES `TT`.`tarjeta` (`idtarjeta`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TT`.`instrumento`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `TT`.`instrumento` ;

CREATE TABLE IF NOT EXISTS `TT`.`instrumento` (
  `idinstrumento` INT NOT NULL,
  `nombreInstrumento` VARCHAR(45) NULL,
  `valor` FLOAT NULL,
  `plazo` INT NULL,
  `valorNominal` FLOAT NULL,
  `idpartida` INT NOT NULL,
  PRIMARY KEY (`idinstrumento`),
  INDEX `fk_instrumento_partida1_idx` (`idpartida` ASC),
  CONSTRAINT `fk_instrumento_partida1`
    FOREIGN KEY (`idpartida`)
    REFERENCES `TT`.`partida` (`idPartida`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TT`.`accion`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `TT`.`accion` ;

CREATE TABLE IF NOT EXISTS `TT`.`accion` (
  `idaccion` INT NOT NULL,
  `nombreAccion` VARCHAR(15) NULL,
  `valorInicial` FLOAT NULL,
  `media` FLOAT NULL,
  `porcentajeCambio` FLOAT NULL,
  `porcentajeVolatilidad` FLOAT NULL,
  `idpartida` INT NOT NULL,
  PRIMARY KEY (`idaccion`),
  INDEX `fk_accion_partida1_idx` (`idpartida` ASC),
  CONSTRAINT `fk_accion_partida1`
    FOREIGN KEY (`idpartida`)
    REFERENCES `TT`.`partida` (`idPartida`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TT`.`factorRiesgo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `TT`.`factorRiesgo` ;

CREATE TABLE IF NOT EXISTS `TT`.`factorRiesgo` (
  `idfactorRiesgo` INT NOT NULL,
  `nombreFactor` VARCHAR(15) NULL,
  `probabilidadGeneral` FLOAT NULL,
  `probabilidadBajoImpacto` FLOAT NULL,
  `probabilidadMedianoImpacto` FLOAT NULL,
  `probabilidadAltoImpacto` FLOAT NULL,
  `idpartida` INT NOT NULL,
  PRIMARY KEY (`idfactorRiesgo`),
  INDEX `fk_factorRiesgo_partida1_idx` (`idpartida` ASC),
  CONSTRAINT `fk_factorRiesgo_partida1`
    FOREIGN KEY (`idpartida`)
    REFERENCES `TT`.`partida` (`idPartida`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TT`.`categoria`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `TT`.`categoria` ;

CREATE TABLE IF NOT EXISTS `TT`.`categoria` (
  `idcategoria` INT NOT NULL AUTO_INCREMENT,
  `nombreCategoria` VARCHAR(20) NULL,
  PRIMARY KEY (`idcategoria`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TT`.`tutorial`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `TT`.`tutorial` ;

CREATE TABLE IF NOT EXISTS `TT`.`tutorial` (
  `idtutorial` INT NOT NULL AUTO_INCREMENT,
  `nombreTutorial` VARCHAR(20) NULL,
  `estado` TINYINT NULL,
  `idcategoria` INT NOT NULL,
  PRIMARY KEY (`idtutorial`),
  INDEX `fk_tutorial_categoria1_idx` (`idcategoria` ASC),
  CONSTRAINT `fk_tutorial_categoria1`
    FOREIGN KEY (`idcategoria`)
    REFERENCES `TT`.`categoria` (`idcategoria`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TT`.`glosario`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `TT`.`glosario` ;

CREATE TABLE IF NOT EXISTS `TT`.`glosario` (
  `idConcepto` INT NOT NULL AUTO_INCREMENT,
  `concepto` VARCHAR(15) NULL,
  `definicion` TEXT NULL,
  PRIMARY KEY (`idConcepto`),
  UNIQUE INDEX `concepto_UNIQUE` (`concepto` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TT`.`cuestionario`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `TT`.`cuestionario` ;

CREATE TABLE IF NOT EXISTS `TT`.`cuestionario` (
  `idcuestionario` INT NOT NULL AUTO_INCREMENT,
  `nombreCuestionario` VARCHAR(20) NULL,
  `idtutorial` INT NOT NULL,
  INDEX `fk_cuestionario_tutorial1_idx` (`idtutorial` ASC),
  PRIMARY KEY (`idcuestionario`),
  CONSTRAINT `fk_cuestionario_tutorial1`
    FOREIGN KEY (`idtutorial`)
    REFERENCES `TT`.`tutorial` (`idtutorial`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TT`.`preguntas`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `TT`.`preguntas` ;

CREATE TABLE IF NOT EXISTS `TT`.`preguntas` (
  `idpreguntas` INT NOT NULL AUTO_INCREMENT,
  `pregunta` VARCHAR(60) NULL,
  `opcionA` VARCHAR(45) NULL,
  `opcionB` VARCHAR(45) NULL,
  `opcionC` VARCHAR(45) NULL,
  `idcuestionario` INT NOT NULL,
  PRIMARY KEY (`idpreguntas`),
  INDEX `fk_preguntas_cuestionario1_idx` (`idcuestionario` ASC),
  CONSTRAINT `fk_preguntas_cuestionario1`
    FOREIGN KEY (`idcuestionario`)
    REFERENCES `TT`.`cuestionario` (`idcuestionario`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TT`.`puntajes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `TT`.`puntajes` ;

CREATE TABLE IF NOT EXISTS `TT`.`puntajes` (
  `idrespuesta` INT NOT NULL AUTO_INCREMENT,
  `respuesta` CHAR(1) NULL,
  `idtutorial` INT NOT NULL,
  `idUsuario` INT NOT NULL,
  `nickname` VARCHAR(15) NOT NULL,
  `idpreguntas` INT NOT NULL,
  PRIMARY KEY (`idrespuesta`),
  INDEX `fk_puntajes_tutorial1_idx` (`idtutorial` ASC),
  INDEX `fk_puntajes_usuario1_idx` (`idUsuario` ASC, `nickname` ASC),
  INDEX `fk_puntajes_preguntas1_idx` (`idpreguntas` ASC),
  CONSTRAINT `fk_puntajes_tutorial1`
    FOREIGN KEY (`idtutorial`)
    REFERENCES `TT`.`tutorial` (`idtutorial`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_puntajes_usuario1`
    FOREIGN KEY (`idUsuario` , `nickname`)
    REFERENCES `TT`.`usuario` (`idUsuario` , `nickname`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_puntajes_preguntas1`
    FOREIGN KEY (`idpreguntas`)
    REFERENCES `TT`.`preguntas` (`idpreguntas`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TT`.`respuestasCorrectas`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `TT`.`respuestasCorrectas` ;

CREATE TABLE IF NOT EXISTS `TT`.`respuestasCorrectas` (
  `idrespuestaCorrecta` INT NOT NULL AUTO_INCREMENT,
  `respuestasCorrectascol` CHAR NULL,
  `idpreguntas` INT NOT NULL,
  PRIMARY KEY (`idrespuestaCorrecta`),
  INDEX `fk_respuestasCorrectas_preguntas1_idx` (`idpreguntas` ASC),
  CONSTRAINT `fk_respuestasCorrectas_preguntas1`
    FOREIGN KEY (`idpreguntas`)
    REFERENCES `TT`.`preguntas` (`idpreguntas`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `TT`.`perfilInversion`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `TT`.`perfilInversion` ;

CREATE TABLE IF NOT EXISTS `TT`.`perfilInversion` (
  `idperfilInversion` INT NOT NULL AUTO_INCREMENT,
  `experienciaInvirtiendo` TINYINT NULL,
  `conocimientosPrevios` TINYINT NULL,
  `InstrumentosDeseados` VARCHAR(45) NULL,
  `meta` VARCHAR(20) NULL COMMENT '	',
  `actitudAlRiesgo` INT NULL,
  `idUsuario` INT NOT NULL,
  `nickname` VARCHAR(15) NOT NULL,
  PRIMARY KEY (`idperfilInversion`),
  INDEX `fk_perfilInversion_usuario1_idx` (`idUsuario` ASC, `nickname` ASC),
  CONSTRAINT `fk_perfilInversion_usuario1`
    FOREIGN KEY (`idUsuario` , `nickname`)
    REFERENCES `TT`.`usuario` (`idUsuario` , `nickname`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

USE `TT` ;

-- -----------------------------------------------------
-- procedure readUsuario
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`readUsuario`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE readUsuario (IN _nickname VARCHAR(15), IN _contrasena VARCHAR(15))
BEGIN
	select *  FROM usuario WHERE nickname=_nickname AND contrasena=_contrasena;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure createUsuario
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`createUsuario`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE createUsuario (IN _nombre VARCHAR(15), IN _apellidoPaterno VARCHAR(15), IN _apellidoMaterno VARCHAR(15), IN _nickname VARCHAR(15), IN _ocupacion VARCHAR(15), IN _correo varchar(45), IN _contrasena VARCHAR(15))
BEGIN
	DECLARE _result INT;
    IF (SELECT idUsuario FROM usuario WHERE nickname = _nickname) <> null THEN
			SET _result = 0;
	ELSE
			INSERT INTO usuario (nombre,apellidoPaterno,apellidoMaterno,nickname,ocupacion,correo,contrasena) VALUES (_nombre,_apellidoPaterno,_apellidoMaterno,_nickname,_ocupacion,_correo,_contrasena);
			SET _result = 1;
	END IF;
    SELECT _result;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure updateUsuario
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`updateUsuario`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `updateUsuario` (IN _idUsuario INT, IN _nombre VARCHAR(15), IN _apellidoPaterno VARCHAR(15), IN _apellidoMaterno VARCHAR(15), IN _nickname VARCHAR(15), IN _ocupacion VARCHAR(15), IN _correo varchar(45))
BEGIN
	UPDATE usuario SET nombre=_nombre , apellidoPaterno=_apellidoPaterno, apellidoMaterno=_apellidoMaterno, correo=_correo, ocupacion=_ocupacion WHERE idUsuario=idUsuario AND nickname = _nickname;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure deleteUsuario
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`deleteUsuario`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `deleteUsuario` (IN _idUsuario INT)
BEGIN
    DECLARE _result INT;
	DELETE FROM usuario WHERE idUsuario = _idUsuario;
    IF (SELECT idUsuario FROM usuario WHERE idUsuario = _idUsuario) = _idUsuario THEN
		SET _result = 0;
	ELSE
		SET _result = 1;
    END IF;
    SELECT _result;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure createGlosario
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`createGlosario`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `createGlosario` (IN _concepto VARCHAR(45), IN _definicion TEXT)
BEGIN
	DECLARE _result INT;
    INSERT INTO glosario (concepto, definicion) VALUES (_concepto, _definicion);
    IF (SELECT concepto FROM glosario WHERE concepto = _concepto) = _concepto THEN
		SET _result = 1;
	ELSE
		SET _result = 0;
    END IF;
    SELECT _result;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure readGlosario
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`readGlosario`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `readGlosario` (IN _concepto VARCHAR(45))
BEGIN
	SELECT * FROM glosario WHERE concepto = _concepto;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure readAllGlosario
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`readAllGlosario`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `readAllGlosario` ()
BEGIN
	SELECT * FROM glosario;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure updateGlosario
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`updateGlosario`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `updateGlosario` (IN _idConcepto INT, IN _concepto VARCHAR(45), IN _definicion VARCHAR(200))
BEGIN
	UPDATE glosario SET concepto = _concepto, definicion = _definicion WHERE idConcepto = _idConcepto;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure deleteGlosario
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`deleteGlosario`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `deleteGlosario` (IN _idConcepto INT)
BEGIN
	DECLARE _result INT;
    DELETE FROM glosario WHERE idConcepto = _idConcepto;
    IF (SELECT concepto FROM glosario WHERE idConcepto = _idConcepto) = null THEN
		SET _result = 1;
	ELSE
		SET _result = 0;
    END IF;
    SELECT _result;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure createTarjeta
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`createTarjeta`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `createTarjeta` (IN _idTarjeta BIGINT(16), IN _fechaCorte INT, 
	IN _saldo FLOAT, IN _tipoTarjeta TINYINT, IN _idInstitucion INT, IN _idUsuario INT, 
    IN _nickname VARCHAR(15))
BEGIN
	DECLARE _result INT;
    IF (SELECT idUsuario FROM tarjeta WHERE idTarjeta = _idTarjeta) <> null THEN
			SET _result = 0;
	ELSE
	INSERT INTO tarjeta (idTarjeta, fechaCorte, saldo, tipoTarjeta, idInstitucion, idUsuario, nickname) 
    VALUES (_idTarjeta, _fechaCorte, _saldo, _tipoTarjeta, _idInstitucion, _idUsuario, _nickname);
    SET _result = 1;
    END IF;
    SELECT _result;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure readInstitucion
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`readInstitucion`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `readInstitucion` (IN _idInstitucion INT)
BEGIN
	SELECT * FROM institucion WHERE idInstitucion = _idInstitucion;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure readAllTarjeta
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`readAllTarjeta`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `readAllTarjeta` ()
BEGIN
	SELECT * FROM tarjeta;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure readTarjeta
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`readTarjeta`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `readTarjeta` (IN _idTarjeta BIGINT(16))
BEGIN
	SELECT * FROM tarjeta WHERE idTarjeta = _idTarjeta;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure updateTarjeta
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`updateTarjeta`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `updateTarjeta` (IN _idTarjeta BIGINT(16), IN _fechaCorte INT, 
	IN _saldo FLOAT, IN _tipoTarjeta TINYINT, IN _idInstitucion INT, IN _idUsuario INT, 
    IN _nickname VARCHAR(15))
BEGIN
	UPDATE tarjeta SET fechaCorte = _fechaCorte, saldo = _saldo,
    tipoTarjeta = _tipoTarjeta, idInstitucion = _idInstitucion, idUsuario = _idUsuario, nickname = _nickname
    WHERE idTarjeta = _idTarjeta;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure deleteTarjeta
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`deleteTarjeta`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `deleteTarjeta` (IN _idTarjeta BIGINt(16))
BEGIN
	DECLARE _result INT;
	DELETE FROM tarjeta WHERE idTarjeta = _idTarjeta;
    IF (SELECT idTarjeta FROM tarjeta WHERE idTarjeta = _idTarjeta) = _idTarjeta THEN
		SET _result = 0;
	ELSE
		SET _result = 1;
    END IF;
    SELECT _result;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure createTarjetaDebito
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`createTarjetaDebito`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `createTarjetaDebito` (IN _idTarjetaDebito INT, IN _comisionFija TINYINT, 
IN _porcentajexManejoCuenta FLOAT, IN _valorComisionFija FLOAT, IN _idTarjeta BIGINT(16))
BEGIN
	DECLARE _result INT;
    IF (SELECT idTarjetaDebito FROM tarjetaDebito WHERE idTarjeta = _idTarjeta) <> null THEN
			SET _result = 0;
	ELSE
	INSERT INTO tarjetaDebito (idTarjetaDebito, comisionFija, porcentajexManejoCuenta, valorComisionFija, idTarjeta) 
    VALUES (_idTarjetaDebito, _comisionFija, _porcentajexManejoCuenta, _valorComisionFija, _idTarjeta);
    SET _result = 1;
    END IF;
    SELECT _result;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure readAllTarjetaDebito
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`readAllTarjetaDebito`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `readAllTarjetaDebito` ()
BEGIN
	SELECT * FROM TarjetaDebito;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure redTarjetaDebito
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`redTarjetaDebito`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `redTarjetaDebito` (IN _idTarjetaDebito INT)
BEGIN
	SELECT * FROM tarjetaDebito WHERE idTarjetaDebito = _idTarjetaDebito;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure deleteTarjetaDebito
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`deleteTarjetaDebito`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `deleteTarjetaDebito` (IN _idTarjetaDebito INT)
BEGIN
	DECLARE _result INT;
	DELETE FROM tarjetaDebito WHERE idTarjetaDebito = _idTarjetaDebito;
    IF (SELECT idTarjeta FROM tarjetaDebito WHERE idTarjetaDebito = _idTarjetaDebito) = null THEN
		SET _result = 1;
	ELSE
		SET _result = 0;
    END IF;
    SELECT _result;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure updateTarjetaDebito
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`updateTarjetaDebito`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `updateTarjetaDebito` (IN _idTarjetaDebito INT, IN _comisionFija TINYINT, 
IN _porcentajexManejoCuenta FLOAT, IN _valorComisionFija FLOAT, IN _idTarjeta BIGINT(16))
BEGIN
	UPDATE tarjetaDebito SET comisionFija = _comisionfija,
    porcentajexManejoCuenta = _porcentajexManejoCuenta, valorComisionFija = _valorComisionFija 
    WHERE idTarjeta = _idTarjeta AND idTarjetaDebito = _idTarjetaDebito;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure createTarjetaDeCredito
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`createTarjetaDeCredito`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `createTarjetaDeCredito` (IN _idTarjetaDeCredito INT,IN _limiteCredito FLOAT, IN _tasaInteresAnual FLOAT, IN _idTarjeta BIGINT(16))
BEGIN
	DECLARE _result INT;
    IF (SELECT idTarjetaDeCredito FROM tarjetaDeCredito WHERE idTarjeta = _idTarjeta) <> null THEN
			SET _result = 0;
	ELSE
	INSERT INTO tarjetaDeCredito (idTarjetaDeCredito, limiteCredito, tasaInteresAnual, idTarjeta) 
    VALUES (_idTarjetaDeCredito, _limiteCredito, _tasaInteresAnual, _idTarjeta);
    SET _result = 1;
    END IF;
    SELECT _result;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure deleteTarjetaDeCredito
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`deleteTarjetaDeCredito`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `deleteTarjetaDeCredito` (IN _idTarjetaDeCredito iNT)
BEGIN
	DECLARE _result INT;
    DELETE FROM tarjetaDeCredito WHERE idTarjetaDeCredito = _idTarjetaDeCredito;
    IF (SELECT idTarjeta FROM tarjetaDeCredito WHERE idTarjetaDeCredito = _idTarjetaDeCredito) = null THEN
		SET _result = 1;
	ELSE
		SET _result = 0;
    END IF;
    SELECT _result;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure readAllTarjetaDeCredito
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`readAllTarjetaDeCredito`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `readAllTarjetaDeCredito` ()
BEGIN
	SELECT * FROM tarjetaDeCredito;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure readTarjetaDeCredito
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`readTarjetaDeCredito`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `readTarjetaDeCredito` (IN _idTarjetaDeCredito INT)
BEGIN
	SELECT * FROM tarjetaDeCredito WHERE idTarjetaDeCredito = _idTarjetaDeCredito;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure updateTarjetaDeCredito
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`updateTarjetaDeCredito`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `updateTarjetaDeCredito` (IN _idTarjetaDeCredito INT,IN _limiteCredito FLOAT, IN _tasaInteresAnual FLOAT, IN _idTarjeta BIGINT(16))
BEGIN
	UPDATE tarjetaDeCredito SET limiteCredito = _limiteCredito, tasaInteresAnual = _tasaInteresAnual
    WHERE idTarjetaDeCredito = _idTarjetaDeCredito AND idTarjeta = _idTarjeta;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure createCategoria
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`createCategoria`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `createCategoria` (IN _nombreCategoria VARCHAR(20))
BEGIN
	DECLARE _result INT;
    IF (SELECT idCategoria FROM categoria WHERE nombreCategoria = _nombreCategoria) <> null THEN
			SET _result = 0;
	ELSE
	INSERT INTO categoria (nombreCategoria) VALUES (_nombreCategoria);
    SET _result = 1;
    END IF;
    SELECT _result;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure deleteCategoria
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`deleteCategoria`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `deleteCategoria` (IN _idCategoria INT)
BEGIN
	DELETE FROM categoria WHERE idCategoria = _idCategoria;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure readAllCategoria
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`readAllCategoria`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `readAllCategoria` ()
BEGIN
	SELECT * FROM categoria;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure readCategoria
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`readCategoria`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `readCategoria` (IN _idCategoria INT)
BEGIN
	SELECT * FROM categoria WHERE idCategoria = _idCategoria;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure updateCategoria
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`updateCategoria`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `updateCategoria` (IN _idCategoria INT, IN _nombreCategoria VARCHAR(20))
BEGIN
	UPDATE categoria SET nombreCategoria = _nombreCategoria WHERE idCategoria = _idCategoria;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure readAllUsuario
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`readAllUsuario`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `readAllUsuario` ()
BEGIN
	SELECT idUsuario, nickname FROM usuario;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure readListaFlujos
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`readListaFlujos`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `readListaFlujos` (IN _idFlujo INT)
BEGIN
	SELECT * FROM listaFlujos WHERE idFlujo = _idFlujo;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure createPartida
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`createPartida`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `createPartida` (IN _nombrePartida VARCHAR(20), IN _limiteJugadores INT,IN _jugadores INT, IN _meta FLOAT, IN _fundador INT, IN _montoInicial FLOAT)
BEGIN
	DECLARE _result INT;
    DECLARE _idPartida INT;
    INSERT INTO partida (nombre, estado, limiteJugadores, jugadores, meta, fundador, montoInicial) VALUES (_nombrePartida, 1, _limiteJugadores, _jugadores, _meta, _fundador, _montoInicial);
    SET _idPartida = (SELECT idPartida FROM partida WHERE nombre = _nombrePartida AND estado = 1);
    UPDATE usuario SET idPartida = _idPartida WHERE idUsuario = _fundador;
    IF (SELECT nombre FROM partida WHERE nombre = _nombrePartida AND estado = 1)  = _nombrePartida THEN
		SET _result = 1;
	ELSE
		SET _result = 0;
    END IF;
    SELECT _result;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure readPartida
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`readPartida`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `readPartida` (IN _idPartida INT)
BEGIN
	SELECT usuario.nombre, partida.idPartida, partida.nombre AS 'nombrePartida', partida.estado, limiteJugadores, jugadores, meta, fundador, montoInicial FROM usuario, partida WHERE partida.idPartida = _idPartida AND usuario.idPartida = _idPartida;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure readAllPartida
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`readAllPartida`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `readAllPartida` ()
BEGIN
	SELECT * FROM partida WHERE estado = 1;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure updatePartida
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`updatePartida`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `updatePartida` (IN _idPartida INT, IN _nombrePartida VARCHAR(20), IN _estado TINYINT, IN _jugadores INT, IN _meta FLOAT, IN _montoInicial FLOAT)
BEGIN
	UPDATE partida SET nombrePartida = _nombrePartida, estado = _estado, jugadores = _jugadores, meta = _meta, montoInicial = _montoInicial WHERE idPartida = _idPartida;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure deletePartida
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`deletePartida`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `deletePartida` (IN _idPartida INT)
BEGIN
	DECLARE _result INT;
    UPDATE usuario SET idPartida = NULL WHERE  idPartida = _idPartida;
	UPDATE partida SET estado = 0 WHERE idPartida = _idPartida;
	IF (SELECT estado FROM partida WHERE idPartida = _idPartida) = 0 THEN
		SET _result = 1;
	ELSE
		SET _result = 0;
    END IF;
    SELECT _result;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure createFlujo
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`createFlujo`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `createFlujo` (IN _fechaCorte INT, IN _nombreFlujo VARCHAR(20), IN _tipoFlujo TINYINT, IN _monto FLOAT, IN _periodicidad INT, IN _idUsuario INT, IN _nickname VARCHAR(15))
BEGIN
	DECLARE _result INT;
	INSERT INTO flujo (fechaCorte, nombreFlujo, tipoFlujo, monto, periodicidad, idUsuario, nickname) 
    VALUES (_fechaCorte, _nombreFlujo, _tipoFlujo, _monto, _periodicidad, _idUsuario, _nickname);
    IF (SELECT _nombreFlujo FROM flujo WHERE idUsuario = _idUsuario AND nombreFlujo=_nombreFlujo) = _nombreFlujo THEN
		SET _result = 1;
	ELSE
    	SET _result = 0;
    END IF;
    SELECT _result;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure readFlujo
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`readFlujo`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `readFlujo` (IN _idFlujo INT)
BEGIN
	SELECT * FROM flujo WHERE idFlujo = _idFlujo;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure readAllFlujo
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`readAllFlujo`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `readAllFlujo` ()
BEGIN
	SELECT * FROM flujo;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure deleteFlujo
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`deleteFlujo`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `deleteFlujo` (IN _idFlujo INT)
BEGIN
    DECLARE _result INT;
    SET _result = 1;
	DELETE FROM flujo WHERE idFlujo = _idFlujo;
    IF (SELECT idFlujo FROM flujo WHERE idFlujo = _idFlujo) <> null THEN
		SET _result = 0;
    END IF;
    SELECT _result;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure updateFlujo
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`updateFlujo`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `updateFlujo` (IN _idFlujo INT, IN _nombreFlujo VARCHAR(20), IN _fechaCorte INT, IN _monto FLOAT, IN _periodicidad INT)
BEGIN
	UPDATE flujo SET fechaCorte = _fechaCorte, nombreFlujo=_nombreFlujo, monto = _monto, periodicidad = _periodicidad WHERE idFlujo = _idFlujo;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure updateContrasena
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`updateContrasena`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `updateContrasena` (IN _idUsuario INT, IN _contrasena VARCHAR(15), IN nuevaContrasena VARCHAR(15))
BEGIN
	DECLARE _result INT;
    IF (SELECT contrasena FROM usuario WHERE idUsuario = _idUsuario) = _contrasena THEN
	UPDATE usuario SET contrasena = nuevaContrasena WHERE idUsuario = _idUsuario;
    ELSE
		SET _result = 0;
    END IF;
    IF (SELECT contrasena FROM usuario WHERE idUsuario = _idUsuario) = nuevaContrasena THEN
		SET _result = 1;
	ELSE 
		SET _result = 0;
    END IF;
    SELECT _result;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure readAllFlujoEgreso
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`readAllFlujoEgreso`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `readAllFlujoEgreso` (IN _idUsuario INT)
BEGIN
	SELECT idFlujo, nombreFlujo, fechaCorte, monto, periodicidad FROM flujo WHERE tipoFlujo = 0 AND idUsuario = _idUsuario;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure readAllFlujoIngreso
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`readAllFlujoIngreso`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `readAllFlujoIngreso` (IN _idUsuario INT)
BEGIN
	SELECT idFlujo, nombreFlujo, fechaCorte, monto, periodicidad FROM flujo WHERE tipoFlujo = 1 AND idUsuario = _idUsuario;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure readAllTarjetasDebito
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`readAllTarjetasDebito`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `readAllTarjetasDebito` (IN _idusuario INT)
BEGIN
	SELECT tarjeta.idTArjeta, fechaCorte, saldo, comisionFija, porcentajexManejoCuenta, valorComisionFija FROM tarjeta, tarjetaDebito WHERE idUsuario = _idUsuario AND tarjeta.idTArjeta = tarjetaDebito.idTarjeta;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getUsuario
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`getUsuario`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `getUsuario` (IN _idUsuario INT)
BEGIN
	SELECT * FROM usuario WHERE idUsuario = _idUsuario;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure readAllTarjetasCredito
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`readAllTarjetasCredito`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `readAllTarjetasCredito` (IN _idusuario INT)
BEGIN
	SELECT tarjeta.idTarjeta, fechaCorte, saldo, limiteCredito, tasaInteresAnual FROM tarjeta, tarjetaDeCredito WHERE idUsuario = _idUsuario AND tarjeta.idTarjeta = tarjetaDeCredito.idTarjeta;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure changeContrasena
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`changeContrasena`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `changeContrasena` (IN _idUsuario INT, IN _contrasena VARCHAR(15))
BEGIN
	DECLARE _result INT;
    SET _result = 0;
	UPDATE usuario SET contrasena = _contrasena WHERE idUsuario = _idUsuario;
    IF (SELECT contrasena FROM usuario WHERE idUsuario = _idUsuario) = _contrasena THEN
		SET _result = 1;
    END IF;
    SELECT _result;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure agregarJugador
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`agregarJugador`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `agregarJugador` (IN _idUsuario INT, IN _idPartida INT)
BEGIN
	DECLARE _result INT;
    DECLARE _jugadores INT;
	SET _jugadores = (SELECT jugadores+1 FROM partida WHERE idPartida = _idPartida);
	IF (SELECT idPartida FROM partida WHERE idPartida = _idPartida) = _idPartida THEN
		UPDATE partida SET jugadores = _jugadores WHERE idPartida = _idPartida;
        UPDATE usuario SET idPartida = _idPartida WHERE idUsuario = _idUsuario;
		SET _result = 1;
    ELSE
		SET _result = 0;
    END IF;
    SELECT _result;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure dejarPartida
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`dejarPartida`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `dejarPartida` (IN _idUsuario INt, IN _idPartida INT)
BEGIN
	DECLARE _result INT;
    DECLARE _jugadores INT;
	SET _jugadores = (SELECT jugadores-1 FROM partida WHERE idPartida = _idPartida);
	IF (SELECT idPartida FROM partida WHERE idPartida = _idPartida) = _idPartida THEN
		UPDATE partida SET jugadores = _jugadores WHERE idPartida = _idPartida;
        UPDATE usuario SET idPartida = NULL WHERE idUsuario = _idUsuario;
		SET _result = 1;
    ELSE
		SET _result = 0;
    END IF;
    SELECT _result;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure readAllCasaDeBolsa
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`readAllCasaDeBolsa`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `readAllCasaDeBolsa` ()
BEGIN
	SELECT * FROM casaDeBolsa;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure createCasaDeBolsa
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`createCasaDeBolsa`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `createCasaDeBolsa` (IN _nombre VARCHAR(20), IN _comision FLOAT, IN _mensualidad FLOAT)
BEGIN
	DECLARE _result INT;
    INSERT INTO casaDeBolsa (nombre, comisionCompraAccion, mensualidadManejoPortafolio) VALUES (_nombre, _comision, _mensualidad);
    IF (SELECT nombre FROM casaDeBolsa WHERE nombre = _nombre) = _nombre THEN
		SET _result = 1;
	ELSE
		SET _result = 0;
    END IF;
    SELECT _result;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure deleteCasaDeBolsa
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`deleteCasaDeBolsa`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `deleteCasaDeBolsa` (IN _idCasaDeBolsa INT)
BEGIN
	DECLARE _result INT;
	DELETE FROM casaDeBolsa WHERE idCasaDeBolsa = _idCasaDeBolsa; 
	IF (SELECT idCasaDeBolsa FROM casaDeBolsa WHERE idCasaDeBolsa = _idCasaDeBolsa) = _idCasaDeBolsa THEN
		SET _result = 0;
	ELSE
		SET _result = 1;
    END IF;
    SELECT _result;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure updateCasaDeBolsa
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`updateCasaDeBolsa`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `updateCasaDeBolsa` (IN _idCasaDeBolsa INT, IN _nombre VARCHAR(20), IN _comision FLOAT, IN _mensualidad FLOAT)
BEGIN
	UPDATE casaDeBolsa SET nombre = _nombre, comisionCompraAccion = _comision, mensualidadManejoPortafolio = _mensualidad WHERE idCasaDeBolsa = _idCasaDeBolsa;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure iniciarPartida
-- -----------------------------------------------------

USE `TT`;
DROP procedure IF EXISTS `TT`.`iniciarPartida`;

DELIMITER $$
USE `TT`$$
CREATE PROCEDURE `iniciarPartida` (IN _idPartida INT)
BEGIN
	UPDATE partida SET estado = 2 WHERE idPartida = _idPartida;
END$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `TT`.`partida`
-- -----------------------------------------------------
START TRANSACTION;
USE `TT`;
INSERT INTO `TT`.`partida` (`idPartida`, `nombre`, `estado`, `limiteJugadores`, `jugadores`, `meta`, `fundador`, `montoInicial`) VALUES (1, 'Aprendiendo', 1, 5, 1, 300000, 1, 10000);

COMMIT;


-- -----------------------------------------------------
-- Data for table `TT`.`casaDeBolsa`
-- -----------------------------------------------------
START TRANSACTION;
USE `TT`;
INSERT INTO `TT`.`casaDeBolsa` (`idCasaDeBolsa`, `nombre`, `comisionCompraAccion`, `mensualidadManejoPortafolio`) VALUES (1, 'ACTINVER', 0.03, 50);
INSERT INTO `TT`.`casaDeBolsa` (`idCasaDeBolsa`, `nombre`, `comisionCompraAccion`, `mensualidadManejoPortafolio`) VALUES (2, 'Kuspit', 0.025, 60);

COMMIT;


-- -----------------------------------------------------
-- Data for table `TT`.`usuario`
-- -----------------------------------------------------
START TRANSACTION;
USE `TT`;
INSERT INTO `TT`.`usuario` (`idUsuario`, `nickname`, `nombre`, `apellidoPaterno`, `apellidoMaterno`, `ocupacion`, `correo`, `contrasena`, `idPartida`, `idCasaDeBolsa`) VALUES (1, 'josi', 'Josimar', 'Gutierrez', 'Avina', 'Estudiante', 'josiavina@gmail.com', '1234', 1, 2);
INSERT INTO `TT`.`usuario` (`idUsuario`, `nickname`, `nombre`, `apellidoPaterno`, `apellidoMaterno`, `ocupacion`, `correo`, `contrasena`, `idPartida`, `idCasaDeBolsa`) VALUES (2, 'vic', 'Victor', 'Amador ', 'Munoz', 'Estudiante', 'vic@gmail.com', 'vicvic', NULL, NULL);
INSERT INTO `TT`.`usuario` (`idUsuario`, `nickname`, `nombre`, `apellidoPaterno`, `apellidoMaterno`, `ocupacion`, `correo`, `contrasena`, `idPartida`, `idCasaDeBolsa`) VALUES (3, 'wen', 'Nancy', 'Ocotitla ', 'Rojas', 'Docente', 'nanwen@gmail.com', '123', NULL, NULL);

COMMIT;


-- -----------------------------------------------------
-- Data for table `TT`.`flujo`
-- -----------------------------------------------------
START TRANSACTION;
USE `TT`;
INSERT INTO `TT`.`flujo` (`idFlujo`, `nombreFlujo`, `fechaCorte`, `tipoFlujo`, `monto`, `periodicidad`, `idUsuario`, `nickname`) VALUES (1, 'gas', 2, 0, 214.5, 4, 1, 'josi');
INSERT INTO `TT`.`flujo` (`idFlujo`, `nombreFlujo`, `fechaCorte`, `tipoFlujo`, `monto`, `periodicidad`, `idUsuario`, `nickname`) VALUES (2, 'sueldo', 2, 1, 1500, 2, 1, 'josi');
INSERT INTO `TT`.`flujo` (`idFlujo`, `nombreFlujo`, `fechaCorte`, `tipoFlujo`, `monto`, `periodicidad`, `idUsuario`, `nickname`) VALUES (3, 'telefono', 3, 0, 500, 4, 1, 'josi');
INSERT INTO `TT`.`flujo` (`idFlujo`, `nombreFlujo`, `fechaCorte`, `tipoFlujo`, `monto`, `periodicidad`, `idUsuario`, `nickname`) VALUES (4, 'pension', 2, 1, 4000, 2, 1, 'josi');

COMMIT;


-- -----------------------------------------------------
-- Data for table `TT`.`tarjeta`
-- -----------------------------------------------------
START TRANSACTION;
USE `TT`;
INSERT INTO `TT`.`tarjeta` (`idtarjeta`, `fechaCorte`, `saldo`, `tipoTarjeta`, `idUsuario`, `nickname`) VALUES (1234567891011, 2, 12300, 1, 1, 'josi');
INSERT INTO `TT`.`tarjeta` (`idtarjeta`, `fechaCorte`, `saldo`, `tipoTarjeta`, `idUsuario`, `nickname`) VALUES (123498765456, 1, 1000, 1, 1, 'josi');
INSERT INTO `TT`.`tarjeta` (`idtarjeta`, `fechaCorte`, `saldo`, `tipoTarjeta`, `idUsuario`, `nickname`) VALUES (987654321, 3, 2000, 0, 1, 'josi');
INSERT INTO `TT`.`tarjeta` (`idtarjeta`, `fechaCorte`, `saldo`, `tipoTarjeta`, `idUsuario`, `nickname`) VALUES (109865432, 4, 23.5, 0, 1, 'josi');

COMMIT;


-- -----------------------------------------------------
-- Data for table `TT`.`tarjetaDeCredito`
-- -----------------------------------------------------
START TRANSACTION;
USE `TT`;
INSERT INTO `TT`.`tarjetaDeCredito` (`idTarjetaDeCredito`, `limiteCredito`, `tasaInteresAnual`, `idtarjeta`) VALUES (1, 15000, 650, 987654321);
INSERT INTO `TT`.`tarjetaDeCredito` (`idTarjetaDeCredito`, `limiteCredito`, `tasaInteresAnual`, `idtarjeta`) VALUES (2, 3000, 200, 109865432);

COMMIT;


-- -----------------------------------------------------
-- Data for table `TT`.`tarjetaDebito`
-- -----------------------------------------------------
START TRANSACTION;
USE `TT`;
INSERT INTO `TT`.`tarjetaDebito` (`idTarjetaDebito`, `comisionFija`, `porcentajexManejoCuenta`, `valorComisionFija`, `idtarjeta`) VALUES (1, 1, 0, 143.5, 1234567891011);
INSERT INTO `TT`.`tarjetaDebito` (`idTarjetaDebito`, `comisionFija`, `porcentajexManejoCuenta`, `valorComisionFija`, `idtarjeta`) VALUES (2, 0, 0.15, 0, 123498765456);

COMMIT;


-- -----------------------------------------------------
-- Data for table `TT`.`glosario`
-- -----------------------------------------------------
START TRANSACTION;
USE `TT`;
INSERT INTO `TT`.`glosario` (`idConcepto`, `concepto`, `definicion`) VALUES (1, 'Afore', 'Las administradoras de Fondos para el Retiro son instituciones financieras que administran las aportaciones de dinero que hacen los trabajadores, sus patrones y el gobierno para asegurar las pensiones para el retiro.');
INSERT INTO `TT`.`glosario` (`idConcepto`, `concepto`, `definicion`) VALUES (2, 'Bolsa de valores', 'Es una empresa privada que facilita a sus miembros la compra-venta de valores, tales como acciones, bonos, certificados o títulos de participación y otros instrumentos financieros .');
INSERT INTO `TT`.`glosario` (`idConcepto`, `concepto`, `definicion`) VALUES (3, 'Casas de bolsa:', 'instituciones financieras que captan ahorro del público y lo invierten en empresa que emiten acciones y otros instrumentos para financiarse, otorgando rendimientos que se cotizan en la bolsa de valores.');
INSERT INTO `TT`.`glosario` (`idConcepto`, `concepto`, `definicion`) VALUES (4, 'Comisión', 'es el precio de un servicio. En lenguaje financiero, las comisiones son la cuota que se pagan a las instituciones financieras a cambio de tener derecho a un producto o servicio.');
INSERT INTO `TT`.`glosario` (`idConcepto`, `concepto`, `definicion`) VALUES (5, 'CNBV', 'supervisa y vigila a las entidades financieras de su competencia, tales como bancos, empresas bursátiles, casa de cambio, sociedades de ahorro y préstamo, uniones de crédito.');
INSERT INTO `TT`.`glosario` (`idConcepto`, `concepto`, `definicion`) VALUES (6, 'Corredor público', 'es un mediador autorizado por el gobierno para proponer, ajustar y otorgar contratos de operaciones mercantiles como compraventa de bienes, integración de sociedades, otorgamiento de asesoría jurídica.');
INSERT INTO `TT`.`glosario` (`idConcepto`, `concepto`, `definicion`) VALUES (7, 'Egresos', 'salidas de dinero de un apersona, familia, empresa o gobierno para la adquisición o pago de bienes o servicios.');
INSERT INTO `TT`.`glosario` (`idConcepto`, `concepto`, `definicion`) VALUES (8, 'Impuestos', 'tributos o contribuciones que los gobiernos cobran a la población con objeto de sostener s gasto y financiar los servicios que proporcionan.');
INSERT INTO `TT`.`glosario` (`idConcepto`, `concepto`, `definicion`) VALUES (9, 'Inflación', 'es un desequilibrio económico provocado por la excesiva emisión de moneda que rebasa las necesidades de la circulación de mercancías o sobrepasa las divisas que deben servirle de respaldo: produce una disminución del poder adquisitivo del dinero. Se manifiesta como un aumento sostenido y generalizado de los precios.');
INSERT INTO `TT`.`glosario` (`idConcepto`, `concepto`, `definicion`) VALUES (10, 'Interés', 'se denomina interés al precio que se paga por usar el dinero recibido en préstamo durante determinado periodo; es decir, el monto que la persona que presta dinero (prestamista) cobra a quienes lo recibe (prestatarios)');

COMMIT;

